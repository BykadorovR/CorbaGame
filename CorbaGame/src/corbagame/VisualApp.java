/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package corbagame;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.BasicStroke;
import corbagame.GameClient;
import Game.ICell;
import Game.IGame;
/**
 *
 * @author akokoshn
 */
public class VisualApp extends javax.swing.JFrame {

    int grid[]; // 0 - free, 1 - live "0", 2 - death "0", 3 - live "x", 4 - death "x"
    int _player; //1 - "0", 3 - "x", -1 - "none"
    int _u_player;
    GameClient _client;
    ICell[] _grid;
    String MyID;
    String[] args;
    
    /**
     * Creates new form VisualApp
     */
    public VisualApp() {
        initComponents();
        grid = new int[100];
        for (int i = 0; i <  100; i ++)
        {
            grid[i] = 0;
        }
        _player = 3;
        _client = new GameClient(this);
        //ask _player
        //ask grid
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("connect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("disconnect");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(350, 0));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        _client.start();
        Draw();
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        int index = (evt.getY()/28)*10 + (evt.getX()/28);
        if (FindWay(index) == 1)
        {
            if (grid[index] == 0)
            {
                grid[index] = _player;
                _grid[index].setCell(1, MyID);
            }
            else
            {
                grid[index] = _u_player + 1;
                _grid[index].setCell(2, MyID);
            }
            
        }
        
        //send grid
        Draw();
        
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        _client.disconect();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private int FindWay(int index)
    {
        if ((index == 0) || (index == 99))
        {
            return 1;
        }
        if (grid[index] == _player)
        {
            return 1;
        }
        
        
        int shift = index;
        if (index%10 > 0)
        {
            shift = index - 1;
            if ((grid[shift] != (_player + 1)) && (grid[shift] != 0))// not free, not death player
            {
                if ((_player - 2) > 0)
                {
                    if ((grid[shift] == (_player - 1)) || (grid[shift] == _player))
                        return 1;
                }
                else
                {
                    if ((grid[shift] == (_player + 3)) || (grid[shift] == _player))
                        return 1;
                }
                
            }
        }
        if ((index%10 > 0) && (index/10 > 0))
        {
            shift = index - 10 - 1;
            if ((grid[shift] != (_player + 1)) && (grid[shift] != 0))// not free, not death player
            {
                if ((_player - 2) > 0)
                {
                    if ((grid[shift] == (_player - 1)) || (grid[shift] == _player))
                        return 1;
                }
                else
                {
                    if ((grid[shift] == (_player + 3)) || (grid[shift] == _player))
                        return 1;
                }
                
            }
        }
        if (index/10 > 0)
        {
            shift = index - 10;
            if ((grid[shift] != (_player + 1)) && (grid[shift] != 0))// not free, not death player
            {
                if ((_player - 2) > 0)
                {
                    if ((grid[shift] == (_player - 1)) || (grid[shift] == _player))
                        return 1;
                }
                else
                {
                    if ((grid[shift] == (_player + 3)) || (grid[shift] == _player))
                        return 1;
                }
                
            }
        }
        if ((index%10 < 9) && (index/10 > 0))
        {
            shift = index - 10 + 1;
            if ((grid[shift] != (_player + 1)) && (grid[shift] != 0))// not free, not death player
            {
                if ((_player - 2) > 0)
                {
                    if ((grid[shift] == (_player - 1)) || (grid[shift] == _player))
                        return 1;
                }
                else
                {
                    if ((grid[shift] == (_player + 3)) || (grid[shift] == _player))
                        return 1;
                }
                
            }
        }
        if (index%10 < 9)
        {
            shift = index + 1;
            if ((grid[shift] != (_player + 1)) && (grid[shift] != 0))// not free, not death player
            {
                if ((_player - 2) > 0)
                {
                    if ((grid[shift] == (_player - 1)) || (grid[shift] == _player))
                        return 1;
                }
                else
                {
                    if ((grid[shift] == (_player + 3)) || (grid[shift] == _player))
                        return 1;
                }
                
            }
        }
        if ((index%10 < 9) && (index/10 > 0))
        {
            shift = index + 10 + 1;
            if ((grid[shift] != (_player + 1)) && (grid[shift] != 0))// not free, not death player
            {
                if ((_player - 2) > 0)
                {
                    if ((grid[shift] == (_player - 1)) || (grid[shift] == _player))
                        return 1;
                }
                else
                {
                    if ((grid[shift] == (_player + 3)) || (grid[shift] == _player))
                        return 1;
                }
                
            }
        }
        if (index/10 < 9)
        {
            shift = index + 10;
            if ((grid[shift] != (_player + 1)) && (grid[shift] != 0))// not free, not death player
            {
                if ((_player - 2) > 0)
                {
                    if ((grid[shift] == (_player - 1)) || (grid[shift] == _player))
                        return 1;
                }
                else
                {
                    if ((grid[shift] == (_player + 3)) || (grid[shift] == _player))
                        return 1;
                }
                
            }
        }
        if ((index%10 > 0) && (index/10 < 9))
        {
            shift = index + 10 - 1;
            if ((grid[shift] != (_player + 1)) && (grid[shift] != 0))// not free, not death player
            {
                if ((_player - 2) > 0)
                {
                    if ((grid[shift] == (_player - 1)) || (grid[shift] == _player))
                        return 1;
                }
                else
                {
                    if ((grid[shift] == (_player + 3)) || (grid[shift] == _player))
                        return 1;
                }
                
            }
        }
        return 0;
    }
    
    private void Draw()
    {
        Graphics2D g = (Graphics2D)jPanel1.getGraphics();
        g.setColor(Color.WHITE);
        g.fillRect(1, 1, 280, 280);
        g.setColor(Color.GRAY);
        for (int i = 0; i < 10; i ++)
        {
            g.drawLine(0, 28*i, 280, 28*i);
            g.drawLine(28*i, 0, 28*i, 280);
        }
        
        g.setStroke(new BasicStroke(2));
        for (int i = 0; i < 100; i++)
        {
            if (grid[i] == 1)
            {
                g.setColor(Color.GREEN);
                g.drawOval(((i%10)*28 + 10), ((i/10)*28 + 10), 13, 13);
            }
            else if (grid[i] == 2)
            {
                g.setColor(Color.BLACK);
                g.drawOval(((i%10)*28 + 10), ((i/10)*28 + 10), 13, 13);
            }
            else if (grid[i] == 3)
            {
                g.setColor(Color.GREEN);
                g.drawLine(((i%10)*28 + 3), ((i/10)*28 + 3), ((i%10)*28 + 25), ((i/10)*28 + 25));
                g.drawLine(((i%10)*28 + 25), ((i/10)*28 + 3), ((i%10)*28 + 3), ((i/10)*28 + 25));
            }
            else if (grid[i] == 4)
            {
                g.setColor(Color.BLACK);
                g.drawLine(((i%10)*28 + 3), ((i/10)*28 + 3), ((i%10)*28 + 25), ((i/10)*28 + 25));
                g.drawLine(((i%10)*28 + 25), ((i/10)*28 + 3), ((i%10)*28 + 3), ((i/10)*28 + 25));
            }
        }
        
    }
    public void SetParam(ICell[] __grid, String[] ID, String _MyID)
    {
        MyID = _MyID;
        jTextArea1.append("START GAME\n");
        jTextArea1.append("MY ID: " + MyID + "\n");
        if (MyID.equals(ID[0]))
        {
            _player = 1;
            _u_player = 3;
            jTextArea1.append("I AM  o\n");
        }
        else
        {
            _player = 3;
            _u_player = 1;
            jTextArea1.append("I AM  x\n");
        }
        
        _grid = __grid;
        for (int i = 0; i < 10; i++)
            for (int j = 0; j < 10; j++)
            {
                if (_grid[i*10 + j].getCell() != 0)
                {
                    if (_grid[i*10 + j].getID() == ID[0])
                    {
                        grid[i*10 + j] = 1;
                    }
                    else
                    {
                        grid[i*10 + j] = 3;
                    }
                }
            }
        Draw();
    }
    
    public void SetGrid(ICell[] __grid)
    {
        _grid = __grid;
        for (int i = 0; i < 10; i++)
            for (int j = 0; j < 10; j++)
            {
                if (_grid[i*10 + j].getCell() != 0)
                {
                    if (MyID.equals(_grid[i*10 + j].getID()))
                    {
                        if (_grid[i*10 + j].getCell() == 1)
                            grid[i*10 + j] = _player;
                        else
                            grid[i*10 + j] = _u_player + 1;
                    }
                    else
                    {
                        if (_grid[i*10 + j].getCell() == 1)
                            grid[i*10 + j] = _u_player;
                        else
                            grid[i*10 + j] = _player + 1;
                    }
                }
            }
        Draw();
    }
    
    public void StopGame() {
        jTextArea1.append("STOP GAME\n");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VisualApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
